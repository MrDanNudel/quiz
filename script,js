document.addEventListener("DOMContentLoaded", () => {
  const subjects = {
    html: generateHTMLQuestions(),
    css: generateCSSQuestions(),
    java: generateJavaQuestions(),
    javascript: generateJavaScriptQuestions(),
    network: generateNetworkQuestions(),
  };

  let currentSubject = null;
  let currentQuestions = [];
  let currentQuestionIndex = 0;
  let wrongAnswers = 0;
  let timer;
  let timeLeft = 30;

  const startButton = document.getElementById("start-quiz");
  const tryAgainButton = document.getElementById("try-again");
  const questionText = document.getElementById("question-text");
  const timerText = document.getElementById("timer-text"); // New timer text element
  const answerButtons = Array.from(document.getElementsByClassName("answer"));
  const resultDiv = document.getElementById("result");
  const quizArea = document.getElementById("quiz-area");
  const gameOverDiv = document.getElementById("game-over");
  const finalMessage = document.getElementById("final-message");
  const progressBar = document.getElementById("progress");

  startButton.addEventListener("click", startQuiz);
  tryAgainButton.addEventListener("click", () => {
    location.reload();
  });

  function startQuiz() {
    currentSubject = document.getElementById("subjects").value;
    if (subjects[currentSubject]) {
      currentQuestions = getRandomQuestions(subjects[currentSubject], 10);
      currentQuestionIndex = 0;
      wrongAnswers = 0;
      document.getElementById("subject-selection").style.display = "none";
      quizArea.style.display = "block";
      loadNextQuestion();
    } else {
      console.error("Selected subject has no questions.");
    }
  }

  function loadNextQuestion() {
    if (currentQuestionIndex >= currentQuestions.length || wrongAnswers >= 3) {
      endGame();
      return;
    }

    resetAnswerStyles();
    const question = currentQuestions[currentQuestionIndex];
    questionText.textContent = question.question;
    timerText.textContent = `Time left: ${timeLeft}`; // Update timer text
    const correctAnswer = question.correctAnswer;
    const answers = shuffle([...question.wrongAnswers, correctAnswer]);

    answerButtons.forEach((button, index) => {
      button.textContent = answers[index];
      button.onclick = () =>
        handleAnswer(button, answers[index] === correctAnswer);
    });

    resetTimer();
    startTimer();
  }

  function handleAnswer(button, isCorrect) {
    clearInterval(timer);
    if (isCorrect) {
      button.classList.add("correct");
    } else {
      button.classList.add("wrong");
      wrongAnswers++;
      answerButtons.forEach((btn) => {
        if (
          btn.textContent ===
          currentQuestions[currentQuestionIndex].correctAnswer
        ) {
          btn.classList.add("correct");
        }
      });
      if (wrongAnswers >= 3) {
        endGame();
        return;
      }
    }
    currentQuestionIndex++;
    setTimeout(loadNextQuestion, 2000);
  }

  function resetAnswerStyles() {
    answerButtons.forEach((button) => {
      button.classList.remove("correct", "wrong");
    });
  }

  function resetTimer() {
    timeLeft = 30;
    progressBar.style.width = "100%";
    timerText.textContent = `Time left: ${timeLeft}`; // Reset timer text
  }

  function startTimer() {
    timer = setInterval(() => {
      timeLeft--;
      const percentage = (timeLeft / 30) * 100;
      progressBar.style.transition = "width 0.5s linear";
      progressBar.style.width = `${percentage}%`;
      timerText.textContent = `Time left: ${timeLeft}`;

      if (timeLeft <= 0) {
        clearInterval(timer);
        handleLostQuestion(); // Handle the case when time runs out
      }
    }, 1000);
  }

  function handleLostQuestion() {
    alert("You lost a question!");
    wrongAnswers++;
    if (wrongAnswers >= 3) {
      endGame();
    } else {
      loadNextQuestion();
    }
  }

  function endGame() {
    quizArea.style.display = "none";
    gameOverDiv.style.display = "block";
    finalMessage.textContent =
      wrongAnswers >= 3 ? "You lost! Try again?" : "You won! Congratulations!";
  }

  function getRandomQuestions(array, num) {
    const shuffled = [...array].sort(() => 0.5 - Math.random());
    return shuffled.slice(0, num);
  }

  function shuffle(array) {
    return array.sort(() => Math.random() - 0.5);
  }

  function generateHTMLQuestions() {
    return [
      {
        question: "What does HTML stand for?",
        correctAnswer: "HyperText Markup Language",
        wrongAnswers: [
          "HyperText Machine Language",
          "Hyper Transfer Markup Language",
          "Hyperlink Text Markup Language",
        ],
      },
      // Add more HTML questions up to 30
    ];
  }

  function generateCSSQuestions() {
    return [
      {
        question: "What does CSS stand for?",
        correctAnswer: "Cascading Style Sheets",
        wrongAnswers: [
          "Computer Style Sheets",
          "Colorful Style Sheets",
          "Creative Style Sheets",
        ],
      },
      // Add more CSS questions up to 30
    ];
  }

  function generateJavaQuestions() {
    return [
      {
        question: "What is the size of an int in Java?",
        correctAnswer: "4 bytes",
        wrongAnswers: ["2 bytes", "8 bytes", "16 bytes"],
      },
      // Add more Java questions up to 30
    ];
  }

  function generateJavaScriptQuestions() {
    return [
      {
        question: "Which company developed JavaScript?",
        correctAnswer: "Netscape",
        wrongAnswers: ["Google", "Microsoft", "IBM"],
      },
      // Add more JavaScript questions up to 30
    ];
  }

  function generateNetworkQuestions() {
    return [
      {
        question: "What does IP stand for in networking?",
        correctAnswer: "Internet Protocol",
        wrongAnswers: [
          "Internet Provider",
          "International Protocol",
          "Interpersonal Protocol",
        ],
      },
      // Add more Network questions up to 30
    ];
  }
});
